import glob
import os
import ninja_syntax

# .c files are put into expansion pak ram
c_files = glob.glob('src/*.c', recursive=True)

# .s files are put into expansion pak ram and are *not* intended to have their headersize changed
s_files = glob.glob('asm/*.s', recursive=True)

# .asm files are assembly files that often change the headersize
asm_files = glob.glob('asm/*.asm', recursive=True)

rom_name = "ct2JP"
rom_mod_name = f"{rom_name}.mod.z64"


header = f"""
//Automatically generated by configure.py, do not edit
.n64 // Let armips know we're coding for the N64 architecture
.open "rom/{rom_name}.z64", "rom/{rom_mod_name}", 0 // Open the ROM file
"""

payload_start_text = """
.headersize 0x7F800000
.org 0x80400000
PAYLOAD_START_RAM:
"""

footer = """
.align 8
PAYLOAD_END_RAM:
.close //close file
"""

with open('build.ninja', 'w') as buildfile:
    ninja = ninja_syntax.Writer(buildfile)
    ninja.variable('CC', 'mips64-elf-gcc')
    ninja.variable('STANDARDFLAGS', '-O2 -Wall -Wno-missing-braces -mtune=vr4300 -march=vr4300 -mabi=32 -fomit-frame-pointer -mno-abicalls -fno-pic -G0')
    ninja.variable('INCLUDE_FLAGS', '-Iinclude -Isrc')

    ninja.rule(
        "cc",
        command="$CC $STANDARDFLAGS $INCLUDE_FLAGS -c $in -o $out",
        description="Compiling $in to $out",
        depfile="$out.d",
        deps="gcc",
    )

    # List to collect all object files
    obj_files = []

    # Create build statements for each .c file
    for c_file in c_files:
        obj_file = os.path.join('obj', os.path.relpath(c_file, 'src')).replace('.c', '.o')
        ninja.build(obj_file, 'cc', c_file)
        obj_files.append(obj_file)

    # Add a phony target that depends on all object files
    ninja.build('all', 'phony', obj_files)

    # Add a rule to run armips on main.asm after all .o files are built
    ninja.rule(
        "armips",
        command="armips asm/main.asm -sym syms.txt",
        description="Running armips on main.asm"
    )

    # Create a build statement to run armips after all .o files are built
    ninja.build('run_armips', 'armips', 'all')

    # Add a rule to run n64crc.exe on mod.z64 after armips completes
    ninja.rule(
        "n64crc",
        command=f"n64crc.exe rom/{rom_mod_name}",
        description=f"Running n64crc.exe on {rom_mod_name}"
    )

    # Create a build statement to run n64crc.exe after armips
    ninja.build('run_n64crc', 'n64crc', 'run_armips')

# Create an ASM file that includes other .asm and .s files and imports .o files
with open("asm/main.asm", 'w') as file:
    file.write(header)

    for asm_file in asm_files:
        if asm_file.endswith('main.asm'):
            continue
        file.write(f".include \"{asm_file}\"\n")

    file.write(payload_start_text)

    for s_file in s_files:
        file.write(f".include \"{s_file}\"\n")

    for c_file in c_files:
        obj_file = os.path.join('obj', os.path.relpath(c_file, 'src')).replace('.c', '.o')
        file.write(f".importobj \"{obj_file}\"\n")

    file.write(footer)